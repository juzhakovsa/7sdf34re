// $ANTLR 2.7.7 (2006-11-01): "mathematica6.g" -> "Mathematica6Lexer.java"$

/**
* this code is generated by ANTLR from the 'mathematica6.g'-file
* @author Bernd Gonska
* @version 1.0
*/
package de.jreality.reader.mathematica;
import java.util.*;
import java.util.List;
import java.util.ArrayList;
import de.jreality.geometry.*;
import de.jreality.scene.data.*;
import de.jreality.scene.*;
import de.jreality.scene.SceneGraphComponent;
import de.jreality.shader.Color;
import de.jreality.util.LoggingSystem;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.io.InputStream;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.TokenStreamRecognitionException;
import antlr.CharStreamException;
import antlr.CharStreamIOException;
import antlr.ANTLRException;
import java.io.Reader;
import java.util.Hashtable;
import antlr.CharScanner;
import antlr.InputBuffer;
import antlr.ByteBuffer;
import antlr.CharBuffer;
import antlr.Token;
import antlr.CommonToken;
import antlr.RecognitionException;
import antlr.NoViableAltForCharException;
import antlr.MismatchedCharException;
import antlr.TokenStream;
import antlr.ANTLRHashString;
import antlr.LexerSharedInputState;
import antlr.collections.impl.BitSet;
import antlr.SemanticException;

/** ************************************************************************
*   ******************* The Mathematica Lexer ******************************
*   ************************************************************************
* this class is only for class MathematicaParser
*/
public class Mathematica6Lexer extends antlr.CharScanner implements Mathematica6ParserTokenTypes, TokenStream
 {
public Mathematica6Lexer(InputStream in) {
	this(new ByteBuffer(in));
}
public Mathematica6Lexer(Reader in) {
	this(new CharBuffer(in));
}
public Mathematica6Lexer(InputBuffer ib) {
	this(new LexerSharedInputState(ib));
}
public Mathematica6Lexer(LexerSharedInputState state) {
	super(state);
	caseSensitiveLiterals = true;
	setCaseSensitive(true);
	literals = new Hashtable();
	literals.put(new ANTLRHashString("ViewRange", this), new Integer(149));
	literals.put(new ANTLRHashString("Inset", this), new Integer(16));
	literals.put(new ANTLRHashString("CMYKColor", this), new Integer(52));
	literals.put(new ANTLRHashString("EdgeForm", this), new Integer(55));
	literals.put(new ANTLRHashString("GraphicsGroup", this), new Integer(10));
	literals.put(new ANTLRHashString("ControllerMethod", this), new Integer(98));
	literals.put(new ANTLRHashString("BezierCurve", this), new Integer(86));
	literals.put(new ANTLRHashString("AbsoluteDashing", this), new Integer(73));
	literals.put(new ANTLRHashString("Spec", this), new Integer(135));
	literals.put(new ANTLRHashString("ViewCenter", this), new Integer(146));
	literals.put(new ANTLRHashString("PopupWindow", this), new Integer(129));
	literals.put(new ANTLRHashString("ControllerLinking", this), new Integer(97));
	literals.put(new ANTLRHashString("AxesLabel", this), new Integer(82));
	literals.put(new ANTLRHashString("Cylinder", this), new Integer(13));
	literals.put(new ANTLRHashString("FaceGridsStyle", this), new Integer(109));
	literals.put(new ANTLRHashString("Polygon", this), new Integer(21));
	literals.put(new ANTLRHashString("Opacity", this), new Integer(53));
	literals.put(new ANTLRHashString("Hue", this), new Integer(50));
	literals.put(new ANTLRHashString("BaselinePosition", this), new Integer(91));
	literals.put(new ANTLRHashString("SphericalRegion", this), new Integer(133));
	literals.put(new ANTLRHashString("BoxStyle", this), new Integer(95));
	literals.put(new ANTLRHashString("Gray", this), new Integer(28));
	literals.put(new ANTLRHashString("Lighter", this), new Integer(47));
	literals.put(new ANTLRHashString("JoinForm", this), new Integer(115));
	literals.put(new ANTLRHashString("Pink", this), new Integer(34));
	literals.put(new ANTLRHashString("ViewMatrix", this), new Integer(148));
	literals.put(new ANTLRHashString("EventHandler", this), new Integer(107));
	literals.put(new ANTLRHashString("CapForm", this), new Integer(96));
	literals.put(new ANTLRHashString("ImageSize", this), new Integer(114));
	literals.put(new ANTLRHashString("ContentSelectable", this), new Integer(57));
	literals.put(new ANTLRHashString("Tube", this), new Integer(20));
	literals.put(new ANTLRHashString("FaceGrids", this), new Integer(108));
	literals.put(new ANTLRHashString("LightGray", this), new Integer(39));
	literals.put(new ANTLRHashString("DefaultFont", this), new Integer(105));
	literals.put(new ANTLRHashString("LightPink", this), new Integer(45));
	literals.put(new ANTLRHashString("ImageMargins", this), new Integer(112));
	literals.put(new ANTLRHashString("LightYellow", this), new Integer(42));
	literals.put(new ANTLRHashString("Arrow", this), new Integer(72));
	literals.put(new ANTLRHashString("LightBrown", this), new Integer(43));
	literals.put(new ANTLRHashString("PreserveImageOptions", this), new Integer(130));
	literals.put(new ANTLRHashString("LightMagenta", this), new Integer(41));
	literals.put(new ANTLRHashString("Boxed", this), new Integer(93));
	literals.put(new ANTLRHashString("Epilog", this), new Integer(106));
	literals.put(new ANTLRHashString("Text", this), new Integer(14));
	literals.put(new ANTLRHashString("Purple", this), new Integer(35));
	literals.put(new ANTLRHashString("ViewVertical", this), new Integer(147));
	literals.put(new ANTLRHashString("PlotRange", this), new Integer(122));
	literals.put(new ANTLRHashString("GraphicsComplex", this), new Integer(17));
	literals.put(new ANTLRHashString("Sphere", this), new Integer(12));
	literals.put(new ANTLRHashString("DefaultColor", this), new Integer(104));
	literals.put(new ANTLRHashString("ImagePadding", this), new Integer(113));
	literals.put(new ANTLRHashString("VertexColors", this), new Integer(60));
	literals.put(new ANTLRHashString("Hyperlink", this), new Integer(111));
	literals.put(new ANTLRHashString("RGBColor", this), new Integer(49));
	literals.put(new ANTLRHashString("AxesEdge", this), new Integer(81));
	literals.put(new ANTLRHashString("Tooltip", this), new Integer(141));
	literals.put(new ANTLRHashString("LabelStyle", this), new Integer(118));
	literals.put(new ANTLRHashString("FaceForm", this), new Integer(56));
	literals.put(new ANTLRHashString("Red", this), new Integer(23));
	literals.put(new ANTLRHashString("None", this), new Integer(61));
	literals.put(new ANTLRHashString("Annotation", this), new Integer(77));
	literals.put(new ANTLRHashString("AspectRatio", this), new Integer(79));
	literals.put(new ANTLRHashString("LightSources", this), new Integer(117));
	literals.put(new ANTLRHashString("Background", this), new Integer(90));
	literals.put(new ANTLRHashString("Plot3Matrix", this), new Integer(128));
	literals.put(new ANTLRHashString("AxesStyle", this), new Integer(84));
	literals.put(new ANTLRHashString("BSplineSurface", this), new Integer(88));
	literals.put(new ANTLRHashString("ColorOutput", this), new Integer(100));
	literals.put(new ANTLRHashString("RenderAll", this), new Integer(131));
	literals.put(new ANTLRHashString("LightRed", this), new Integer(36));
	literals.put(new ANTLRHashString("Brown", this), new Integer(32));
	literals.put(new ANTLRHashString("Orange", this), new Integer(33));
	literals.put(new ANTLRHashString("Mouseover", this), new Integer(119));
	literals.put(new ANTLRHashString("Axes", this), new Integer(80));
	literals.put(new ANTLRHashString("LightGreen", this), new Integer(37));
	literals.put(new ANTLRHashString("PointSize", this), new Integer(126));
	literals.put(new ANTLRHashString("Cuboid", this), new Integer(11));
	literals.put(new ANTLRHashString("ViewPoint", this), new Integer(144));
	literals.put(new ANTLRHashString("Method", this), new Integer(120));
	literals.put(new ANTLRHashString("I", this), new Integer(67));
	literals.put(new ANTLRHashString("Specularity", this), new Integer(136));
	literals.put(new ANTLRHashString("VertexNormals", this), new Integer(62));
	literals.put(new ANTLRHashString("Black", this), new Integer(26));
	literals.put(new ANTLRHashString("BaseStyle", this), new Integer(92));
	literals.put(new ANTLRHashString("GrayLevel", this), new Integer(51));
	literals.put(new ANTLRHashString("Thickness", this), new Integer(143));
	literals.put(new ANTLRHashString("Cyan", this), new Integer(29));
	literals.put(new ANTLRHashString("BSplineCurve", this), new Integer(87));
	literals.put(new ANTLRHashString("BoxRatios", this), new Integer(94));
	literals.put(new ANTLRHashString("White", this), new Integer(27));
	literals.put(new ANTLRHashString("Blue", this), new Integer(25));
	literals.put(new ANTLRHashString("PlotLabel", this), new Integer(124));
	literals.put(new ANTLRHashString("Arrowheads", this), new Integer(76));
	literals.put(new ANTLRHashString("AxesOrigin", this), new Integer(83));
	literals.put(new ANTLRHashString("AbsoluteThickness", this), new Integer(75));
	literals.put(new ANTLRHashString("Lighting", this), new Integer(116));
	literals.put(new ANTLRHashString("AbsolutePointSize", this), new Integer(74));
	literals.put(new ANTLRHashString("Shading", this), new Integer(134));
	literals.put(new ANTLRHashString("Graphics3D", this), new Integer(7));
	literals.put(new ANTLRHashString("ViewVector", this), new Integer(150));
	literals.put(new ANTLRHashString("Point", this), new Integer(18));
	literals.put(new ANTLRHashString("Button", this), new Integer(89));
	literals.put(new ANTLRHashString("FormatType", this), new Integer(110));
	literals.put(new ANTLRHashString("PlotRegion", this), new Integer(125));
	literals.put(new ANTLRHashString("DisplayFunction", this), new Integer(103));
	literals.put(new ANTLRHashString("ControllerPath", this), new Integer(99));
	literals.put(new ANTLRHashString("Dynamic", this), new Integer(102));
	literals.put(new ANTLRHashString("Directive", this), new Integer(54));
	literals.put(new ANTLRHashString("Green", this), new Integer(24));
	literals.put(new ANTLRHashString("PolygonIntersections", this), new Integer(127));
	literals.put(new ANTLRHashString("Ticks", this), new Integer(139));
	literals.put(new ANTLRHashString("Line", this), new Integer(19));
	literals.put(new ANTLRHashString("LightCyan", this), new Integer(40));
	literals.put(new ANTLRHashString("LightBlue", this), new Integer(38));
	literals.put(new ANTLRHashString("Style", this), new Integer(138));
	literals.put(new ANTLRHashString("ViewAngle", this), new Integer(145));
	literals.put(new ANTLRHashString("LightPurple", this), new Integer(46));
	literals.put(new ANTLRHashString("SurfaceColor", this), new Integer(22));
	literals.put(new ANTLRHashString("TicksStyle", this), new Integer(140));
	literals.put(new ANTLRHashString("AmbientLight", this), new Integer(85));
	literals.put(new ANTLRHashString("RotationAction", this), new Integer(132));
	literals.put(new ANTLRHashString("StatusArea", this), new Integer(137));
	literals.put(new ANTLRHashString("Prolog", this), new Integer(121));
	literals.put(new ANTLRHashString("Magenta", this), new Integer(30));
	literals.put(new ANTLRHashString("PlotRangePadding", this), new Integer(123));
	literals.put(new ANTLRHashString("Dashing", this), new Integer(101));
	literals.put(new ANTLRHashString("Darker", this), new Integer(48));
	literals.put(new ANTLRHashString("AlignmentPoint", this), new Integer(78));
	literals.put(new ANTLRHashString("Yellow", this), new Integer(31));
	literals.put(new ANTLRHashString("TextStyle", this), new Integer(142));
	literals.put(new ANTLRHashString("LightOrange", this), new Integer(44));
}

public Token nextToken() throws TokenStreamException {
	Token theRetToken=null;
tryAgain:
	for (;;) {
		Token _token = null;
		int _ttype = Token.INVALID_TYPE;
		resetText();
		try {   // for char stream error handling
			try {   // for lexical error handling
				switch ( LA(1)) {
				case '{':
				{
					mOPEN_BRACE(true);
					theRetToken=_returnToken;
					break;
				}
				case '}':
				{
					mCLOSE_BRACE(true);
					theRetToken=_returnToken;
					break;
				}
				case '[':
				{
					mOPEN_BRACKET(true);
					theRetToken=_returnToken;
					break;
				}
				case ']':
				{
					mCLOSE_BRACKET(true);
					theRetToken=_returnToken;
					break;
				}
				case '(':
				{
					mLPAREN(true);
					theRetToken=_returnToken;
					break;
				}
				case ')':
				{
					mRPAREN(true);
					theRetToken=_returnToken;
					break;
				}
				case '\\':
				{
					mBACKS(true);
					theRetToken=_returnToken;
					break;
				}
				case '/':
				{
					mSLASH(true);
					theRetToken=_returnToken;
					break;
				}
				case ',':
				{
					mCOLON(true);
					theRetToken=_returnToken;
					break;
				}
				case '$':
				{
					mDOLLAR(true);
					theRetToken=_returnToken;
					break;
				}
				case '-':
				{
					mMINUS(true);
					theRetToken=_returnToken;
					break;
				}
				case '+':
				{
					mPLUS(true);
					theRetToken=_returnToken;
					break;
				}
				case '>':
				{
					mLARGER(true);
					theRetToken=_returnToken;
					break;
				}
				case '<':
				{
					mSMALER(true);
					theRetToken=_returnToken;
					break;
				}
				case '.':
				{
					mDOT(true);
					theRetToken=_returnToken;
					break;
				}
				case '^':
				{
					mHAT(true);
					theRetToken=_returnToken;
					break;
				}
				case '*':
				{
					mSTAR(true);
					theRetToken=_returnToken;
					break;
				}
				case ':':
				{
					mDDOT(true);
					theRetToken=_returnToken;
					break;
				}
				case '!':
				{
					mT1(true);
					theRetToken=_returnToken;
					break;
				}
				case '@':
				{
					mT2(true);
					theRetToken=_returnToken;
					break;
				}
				case '#':
				{
					mT3(true);
					theRetToken=_returnToken;
					break;
				}
				case '%':
				{
					mT4(true);
					theRetToken=_returnToken;
					break;
				}
				case '&':
				{
					mT5(true);
					theRetToken=_returnToken;
					break;
				}
				case '=':
				{
					mT6(true);
					theRetToken=_returnToken;
					break;
				}
				case ';':
				{
					mT7(true);
					theRetToken=_returnToken;
					break;
				}
				case '?':
				{
					mT9(true);
					theRetToken=_returnToken;
					break;
				}
				case 'A':  case 'B':  case 'C':  case 'D':
				case 'E':  case 'F':  case 'G':  case 'H':
				case 'I':  case 'J':  case 'K':  case 'L':
				case 'M':  case 'N':  case 'O':  case 'P':
				case 'Q':  case 'R':  case 'S':  case 'T':
				case 'U':  case 'V':  case 'W':  case 'X':
				case 'Y':  case 'Z':  case '_':  case 'a':
				case 'b':  case 'c':  case 'd':  case 'e':
				case 'f':  case 'g':  case 'h':  case 'i':
				case 'j':  case 'k':  case 'l':  case 'm':
				case 'n':  case 'o':  case 'p':  case 'q':
				case 'r':  case 's':  case 't':  case 'u':
				case 'v':  case 'w':  case 'x':  case 'y':
				case 'z':
				{
					mID(true);
					theRetToken=_returnToken;
					break;
				}
				case '0':  case '1':  case '2':  case '3':
				case '4':  case '5':  case '6':  case '7':
				case '8':  case '9':
				{
					mINTEGER_THING(true);
					theRetToken=_returnToken;
					break;
				}
				case '\t':  case '\n':  case '\u000c':  case '\r':
				case ' ':
				{
					mWS_(true);
					theRetToken=_returnToken;
					break;
				}
				default:
					if ((LA(1)=='"') && ((LA(2) >= '\u0003' && LA(2) <= '\u00ff'))) {
						mSTRING(true);
						theRetToken=_returnToken;
					}
					else if ((LA(1)=='"') && (true)) {
						mT8(true);
						theRetToken=_returnToken;
					}
				else {
					if (LA(1)==EOF_CHAR) {uponEOF(); _returnToken = makeToken(Token.EOF_TYPE);}
				else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
				}
				}
				if ( _returnToken==null ) continue tryAgain; // found SKIP token
				_ttype = _returnToken.getType();
				_returnToken.setType(_ttype);
				return _returnToken;
			}
			catch (RecognitionException e) {
				throw new TokenStreamRecognitionException(e);
			}
		}
		catch (CharStreamException cse) {
			if ( cse instanceof CharStreamIOException ) {
				throw new TokenStreamIOException(((CharStreamIOException)cse).io);
			}
			else {
				throw new TokenStreamException(cse.getMessage());
			}
		}
	}
}

/** Terminal Symbols */
	public final void mOPEN_BRACE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_BRACE;
		int _saveIndex;
		
		match('{');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCLOSE_BRACE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = CLOSE_BRACE;
		int _saveIndex;
		
		match('}');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_BRACKET(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_BRACKET;
		int _saveIndex;
		
		match('[');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCLOSE_BRACKET(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = CLOSE_BRACKET;
		int _saveIndex;
		
		match(']');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mLPAREN(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = LPAREN;
		int _saveIndex;
		
		match('(');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mRPAREN(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = RPAREN;
		int _saveIndex;
		
		match(')');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mBACKS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = BACKS;
		int _saveIndex;
		
		match('\\');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mSLASH(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = SLASH;
		int _saveIndex;
		
		match('/');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCOLON(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = COLON;
		int _saveIndex;
		
		match(',');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mDOLLAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = DOLLAR;
		int _saveIndex;
		
		match('$');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mMINUS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = MINUS;
		int _saveIndex;
		
		match('-');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mPLUS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = PLUS;
		int _saveIndex;
		
		match('+');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mLARGER(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = LARGER;
		int _saveIndex;
		
		match('>');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mSMALER(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = SMALER;
		int _saveIndex;
		
		match('<');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mDOT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = DOT;
		int _saveIndex;
		
		match('.');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mHAT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = HAT;
		int _saveIndex;
		
		match('^');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mSTAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = STAR;
		int _saveIndex;
		
		match('*');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mDDOT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = DDOT;
		int _saveIndex;
		
		match(':');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT1(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T1;
		int _saveIndex;
		
		match('!');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT2(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T2;
		int _saveIndex;
		
		match('@');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT3(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T3;
		int _saveIndex;
		
		match('#');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT4(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T4;
		int _saveIndex;
		
		match('%');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT5(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T5;
		int _saveIndex;
		
		match('&');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT6(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T6;
		int _saveIndex;
		
		match('=');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT7(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T7;
		int _saveIndex;
		
		match(';');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT8(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T8;
		int _saveIndex;
		
		match('"');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mT9(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = T9;
		int _saveIndex;
		
		match('?');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mID(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = ID;
		int _saveIndex;
		
		{
		switch ( LA(1)) {
		case 'a':  case 'b':  case 'c':  case 'd':
		case 'e':  case 'f':  case 'g':  case 'h':
		case 'i':  case 'j':  case 'k':  case 'l':
		case 'm':  case 'n':  case 'o':  case 'p':
		case 'q':  case 'r':  case 's':  case 't':
		case 'u':  case 'v':  case 'w':  case 'x':
		case 'y':  case 'z':
		{
			matchRange('a','z');
			break;
		}
		case 'A':  case 'B':  case 'C':  case 'D':
		case 'E':  case 'F':  case 'G':  case 'H':
		case 'I':  case 'J':  case 'K':  case 'L':
		case 'M':  case 'N':  case 'O':  case 'P':
		case 'Q':  case 'R':  case 'S':  case 'T':
		case 'U':  case 'V':  case 'W':  case 'X':
		case 'Y':  case 'Z':
		{
			matchRange('A','Z');
			break;
		}
		case '_':
		{
			match('_');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		{
		_loop200:
		do {
			if ((_tokenSet_0.member(LA(1)))) {
				mID_LETTER(false);
			}
			else {
				break _loop200;
			}
			
		} while (true);
		}
		_ttype = testLiteralsTable(_ttype);
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	private final void mID_LETTER(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = ID_LETTER;
		int _saveIndex;
		
		{
		switch ( LA(1)) {
		case 'a':  case 'b':  case 'c':  case 'd':
		case 'e':  case 'f':  case 'g':  case 'h':
		case 'i':  case 'j':  case 'k':  case 'l':
		case 'm':  case 'n':  case 'o':  case 'p':
		case 'q':  case 'r':  case 's':  case 't':
		case 'u':  case 'v':  case 'w':  case 'x':
		case 'y':  case 'z':
		{
			matchRange('a','z');
			break;
		}
		case 'A':  case 'B':  case 'C':  case 'D':
		case 'E':  case 'F':  case 'G':  case 'H':
		case 'I':  case 'J':  case 'K':  case 'L':
		case 'M':  case 'N':  case 'O':  case 'P':
		case 'Q':  case 'R':  case 'S':  case 'T':
		case 'U':  case 'V':  case 'W':  case 'X':
		case 'Y':  case 'Z':
		{
			matchRange('A','Z');
			break;
		}
		case '_':
		{
			match('_');
			break;
		}
		case '0':  case '1':  case '2':  case '3':
		case '4':  case '5':  case '6':  case '7':
		case '8':  case '9':
		{
			matchRange('0','9');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mINTEGER_THING(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = INTEGER_THING;
		int _saveIndex;
		
		{
		int _cnt205=0;
		_loop205:
		do {
			if (((LA(1) >= '0' && LA(1) <= '9'))) {
				mDIGIT(false);
			}
			else {
				if ( _cnt205>=1 ) { break _loop205; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			
			_cnt205++;
		} while (true);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	private final void mDIGIT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = DIGIT;
		int _saveIndex;
		
		{
		matchRange('0','9');
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mSTRING(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = STRING;
		int _saveIndex;
		
		_saveIndex=text.length();
		match('"');
		text.setLength(_saveIndex);
		{
		_loop211:
		do {
			if ((LA(1)=='\\')) {
				mESC(false);
			}
			else if ((_tokenSet_1.member(LA(1)))) {
				{
				match(_tokenSet_1);
				}
			}
			else {
				break _loop211;
			}
			
		} while (true);
		}
		_saveIndex=text.length();
		match('"');
		text.setLength(_saveIndex);
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	private final void mESC(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = ESC;
		int _saveIndex;
		
		_saveIndex=text.length();
		match('\\');
		text.setLength(_saveIndex);
		{
		switch ( LA(1)) {
		case '\\':
		{
			match('\\');
			break;
		}
		case '"':
		{
			match('"');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mWS_(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = WS_;
		int _saveIndex;
		
		{
		int _cnt217=0;
		_loop217:
		do {
			switch ( LA(1)) {
			case ' ':
			{
				match(' ');
				break;
			}
			case '\t':
			{
				match('\t');
				break;
			}
			case '\u000c':
			{
				match('\f');
				break;
			}
			case '\n':  case '\r':
			{
				{
				if ((LA(1)=='\r') && (LA(2)=='\n')) {
					match("\r\n");
				}
				else if ((LA(1)=='\r') && (true)) {
					match('\r');
				}
				else if ((LA(1)=='\n')) {
					match('\n');
					newline();
				}
				else {
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				
				}
				break;
			}
			default:
			{
				if ( _cnt217>=1 ) { break _loop217; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			}
			_cnt217++;
		} while (true);
		}
		_ttype = Token.SKIP;
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	
	private static final long[] mk_tokenSet_0() {
		long[] data = { 287948901175001088L, 576460745995190270L, 0L, 0L, 0L};
		return data;
	}
	public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
	private static final long[] mk_tokenSet_1() {
		long[] data = new long[8];
		data[0]=-17179869192L;
		data[1]=-268435457L;
		for (int i = 2; i<=3; i++) { data[i]=-1L; }
		return data;
	}
	public static final BitSet _tokenSet_1 = new BitSet(mk_tokenSet_1());
	
	}
